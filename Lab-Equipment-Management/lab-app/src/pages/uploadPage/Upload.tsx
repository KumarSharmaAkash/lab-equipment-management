

import React, { useEffect, useRef, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { AppDispatch, RootState } from '../../redux/reduxStorage';
import { RegisterComponent } from '../../redux/slices/ComponentSlice';
import Alert from '../../components/Alert';
import "./UploadCSS.css";
const defaultUrls: { [key: string]: string } = {
    DIODE: 'https://res.utmel.com/Images/Article/07fb93a4-4a17-4209-8f13-203d3468e0f9.jpg',
    RESISTOR:`https://www.lifewire.com/thmb/dpRbSFR4HklEJhsQNPhTjOSHu4I=/2260x1500/filters:fill(auto,1)/115789040-56a1add43df78cf7726cfdce.jpg`,
    LED: 'https://ae01.alicdn.com/kf/HTB1psefMXXXXXcGXVXXq6xXFXXXd/100pcs-Lot-Ultra-Bright-LED-10mm-red-LEDs-light-SUPER-BRIGHT-red-diffused-2000mcd.jpg',
    TRANSISTOR:"https://5.imimg.com/data5/WP/QM/FV/SELLER-3067533/switching-transistor-1000x1000.jpg"
};

const defaultDescription: { [key: string]: string } = {
    DIODE: `A diode is a device which allows current flow through only one direction. That is the current should always flow from the Anode to cathode. The cathode terminal can be identified by using a grey bar as shown in the picture above.

         For 1N4007 Diode, the maximum current carrying capacity is 1A it withstand peaks up to 30A. Hence we can use this in circuits that are designed for less than 1A.  The reverse current is 5uA which is negligible. The power dissipation of this diode is 3W.

            Applications of Diode
            Can be used to prevent reverse polarity problem
            Half Wave and Full Wave rectifiers
            Used as a protection device
            Current flow regulators`,
            RESISTOR:`A resistor is a passive two-terminal electrical component that implements electrical resistance as a circuit element. It is one of the fundamental components used in electronic circuits. The primary function of a resistor is to limit the flow of electric current and to adjust signal levels, divide voltages, bias active elements, and terminate transmission lines.
            Types of Resistors
            Resistors come in various types, each suited for specific applications:
            
            
            Fixed Resistors: These have a set resistance value that does not change. Common types include:
            
            Carbon Composition Resistors: Made from a mixture of carbon powder and a binding material.
            Metal Film Resistors: Known for their precision and stability.
            Wirewound Resistors: Made by winding a metal wire around a core, used for high-power applications.
            Variable Resistors: These allow for adjustment of resistance. Examples include:
            Potentiometers: Used for adjusting levels in devices like volume controls.
            Rheostats: Used to control current.
            Special Resistors: These include thermistors (temperature-dependent resistors) and varistors (voltage-dependent resistors).
            Working Principle
            The operation of a resistor is based on Ohm’s Law, which states that the voltage (V) across a resistor is directly proportional to the current (I) flowing through it, with the resistance ® being the constant of proportionality: V=IR
            . This relationship helps in controlling the current flow and voltage levels within a circuit.
            Applications
            Resistors are ubiquitous in electronic devices and have numerous applications:
            
            Current Limiting: Protecting components by limiting the amount of current that can flow through them.
            Voltage Division: Creating specific voltage levels within a circuit.
            Biasing Active Components: Ensuring that transistors and other active components operate correctly.
            Signal Conditioning: Adjusting signal levels to match the requirements of different parts of a circuit.
            Heat Dissipation: High-power resistors can dissipate heat generated by electrical energy.
            
            Construction and Materials
            Resistors are made from various materials depending on their type and application. Common materials include carbon, metal oxide, and metal film. The construction can vary from simple carbon composition to complex wirewound designs for high-power applications.`,

    LED: `A light-emitting diode (LED) is a semiconductor device that emits light when an electric current flows through it. When current passes through an LED, the electrons recombine with holes emitting light in the process. LEDs allow the current to flow in the forward direction and blocks the current in the reverse direction.

Light Emitting Diode

Light-emitting diodes are heavily doped p-n junctions. Based on the semiconductor material used and the amount of doping, an LED will emit coloured light at a particular spectral wavelength when forward biased. As shown in the figure, an LED is encapsulated with a transparent cover so that emitted light can come out.`
};
export const UploadComponentForm: React.FC = () => {
    const { errorUpload, successMessage } = useSelector((state: RootState) => state.component);
    const dispatch: AppDispatch = useDispatch();
    const [count, setCount] = useState<number>(1);
    const barcodeRef = useRef<HTMLInputElement>(null);
    const imageUrlRef = useRef<HTMLInputElement>(null);
    const genreRef = useRef<HTMLInputElement>(null);
    const descriptionRef = useRef<HTMLTextAreaElement>(null);
    const valueRef = useRef<HTMLInputElement>(null);

    const handleCountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setCount(Number(e.target.value));
    };
    const handleUploadComponent = (e: React.MouseEvent<HTMLButtonElement>) => {
        e.preventDefault();
        if (count > 1) {
            for (let i = 0; i < count; i++) {
                if (
                    genreRef && genreRef.current &&
                    valueRef && valueRef.current
                ) {
                    const barcodeValue = barcodeRef.current?.value || Math.floor(1000000000 + Math.random() * 9000000000).toString();
                    const titleValue = genreRef.current.value + valueRef.current?.value + barcodeValue;
                    const ImageUrl = imageUrlRef.current?.value || defaultUrls[genreRef.current.value.toUpperCase()] || '';
                    const Description = descriptionRef.current?.value || defaultDescription[genreRef.current.value.toUpperCase()] || '';
                    dispatch(
                        RegisterComponent({
                            barcode: barcodeValue,
                            imageUrl: ImageUrl,
                            title: titleValue,
                            description: Description,
                            value: valueRef.current.value,
                            genre: genreRef.current.value,
                        })
                    );
                }
                console.log("hello");
            }
        } else {
            if (
                genreRef && genreRef.current &&
                valueRef && valueRef.current
            ) {
                const barcodeValue = barcodeRef.current?.value || Math.floor(1000000000 + Math.random() * 9000000000).toString();
                const titleValue = genreRef.current.value + valueRef.current?.value + barcodeValue;
                const ImageUrl = imageUrlRef.current?.value || defaultUrls[genreRef.current.value.toUpperCase()] || '';
                const Description = descriptionRef.current?.value || defaultDescription[genreRef.current.value.toUpperCase()] || '';
                dispatch(
                    RegisterComponent({
                        barcode: barcodeValue,
                        imageUrl: ImageUrl,
                        title: titleValue,
                        description: Description,
                        value: valueRef.current.value,
                        genre: genreRef.current.value,
                    })
                );

            }
        }



    };
    useEffect(() => {
        if (successMessage) {
            setTimeout(() => {
                
            }, 3000);
        }
        if (errorUpload) {
            setTimeout(() => {
               
            }, 3000);
        }
    }, [successMessage, errorUpload, dispatch]);
    return (
        <form className='upload-form mt-20 bg-gray-100'>

            {successMessage && (
                <Alert message={successMessage} type="success"  />
            )}
            {errorUpload && <Alert message={errorUpload} type="error"  />}
            <div className="my-6 w-full">
                <div className="grid sm:grid-cols-2 items-center gap-16 p-8 mx-auto max-w-4xl bg-white shadow-[0_2px_10px_-3px_rgba(6,81,237,0.3)] rounded-md text-[#333] font-[sans-serif]">
                    <div>
                        <h1 className="text-3xl font-extrabold">Upload Component</h1>
                        <div className="mt-12">
                            <h2 className=" text-n-6">No. of component</h2>
                            <ul className="mt-3">
                                <li className="flex items-center">
                                    <input type="number" name="count" placeholder='1' onChange={handleCountChange} min="1" className='text-gray-700 bg-[#e6e6e6cf]  rounded-lg' />
                                </li>
                            </ul>
                        </div>

                    </div>
                    <form className="grid gap-y-3">
                        <div className="flex flex-col gap-y-2">
                            <label className="text-sm text-n-6 ">Barcode</label>
                            <input type="text" className="py-2 px-4 outline-none bg-[#e6e6e6cf] rounded-lg" placeholder='Barcode' name='barcode' required ref={barcodeRef} />
                        </div>
                        <div className="flex flex-col gap-y-2">
                            <label className="text-sm text-n-6">Image URL</label>
                            <input type="text" placeholder='Image URL' name='imageUrl' ref={imageUrlRef} className="py-2 px-4 outline-none bg-[#e6e6e6cf] rounded-lg" />
                        </div>
                        <div className="flex flex-col gap-y-2">
                            <label className="text-sm text-n-6">Type</label>
                            <input type="text" placeholder='type' name='type' ref={genreRef} className="py-2 px-4 outline-none bg-[#e6e6e6cf] rounded-lg" />
                        </div>
                        <div className="flex flex-col gap-y-2">
                            <label className="text-sm text-n-6">Value</label>
                            <input type="text" placeholder='Value' name='value' required ref={valueRef} className="py-2 px-4 outline-none bg-[#e6e6e6cf] rounded-lg" />
                        </div>
                        <div className="flex flex-col gap-y-2">
                            <label className="text-sm text-n-6">Description</label>
                            <textarea placeholder='Description' name='description' ref={descriptionRef} className="h-40 py-2 px-4 outline-none bg-[#e6e6e6cf] rounded-lg resize-none" ></textarea>
                        </div>
                        <div>
                            <button type="submit" onClick={handleUploadComponent} className="py-2 px-4 text-sm font-extrabold bg-[#077bff] text-white rounded-lg">Submit</button>
                        </div>
                    </form>
                </div>
            </div>







        </form>






    );
};
